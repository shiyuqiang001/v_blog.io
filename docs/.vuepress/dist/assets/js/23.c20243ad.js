(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{378:function(t,_,v){"use strict";v.r(_);var a=v(45),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_2017年回忆"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2017年回忆"}},[t._v("#")]),t._v(" 2017年回忆")]),t._v(" "),v("h2",{attrs:{id:"单例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),v("p",[t._v("保证整个系统中一个类只有一个对象的实例，实现这种功能的方式就叫单例模式。")]),t._v(" "),v("h3",{attrs:{id:"为什么要用单例模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用单例模式"}},[t._v("#")]),t._v(" 为什么要用单例模式?")]),t._v(" "),v("p",[t._v("1、单例模式节省公共资源")]),t._v(" "),v("p",[t._v("比如：大家都要喝水，但是没必要每人家里都打一口井是吧，通常的做法是整个村里打一个井就够了，大家都从这个井里面打水喝。")]),t._v(" "),v("p",[t._v("对应到我们计算机里面，像日志管理、打印机、数据库连接池、应用配置。")]),t._v(" "),v("p",[t._v("2、单例模式方便控制")]),t._v(" "),v("p",[t._v("就像日志管理，如果多个人同时来写日志，你一笔我一笔那整个日志文件都乱七八糟，如果想要控制日志的正确性，那么必须要对关键的代码进行上锁，只能一个一个按照顺序来写，而单例模式只有一个人来向日志里写入信息方便控制，避免了这种多人干扰的问题出现。")]),t._v(" "),v("p",[t._v("实现单例模式的思路")]),t._v(" "),v("ol",[v("li",[t._v("构造私有:")])]),t._v(" "),v("p",[t._v("如果要保证一个类不能多次被实例化，那么我肯定要阻止对象被new 出来，所以需要把类的所有构造方法私有化。")]),t._v(" "),v("p",[t._v("2.以静态方法返回实例。")]),t._v(" "),v("p",[t._v("因为外界就不能通过new来获得对象，所以我们要通过提供类的方法来让外界获取对象实例。")]),t._v(" "),v("p",[t._v("3.确保对象实例只有一个。")]),t._v(" "),v("p",[t._v("只对类进行一次实例化，以后都直接获取第一次实例化的对象。")])])}),[],!1,null,null,null);_.default=s.exports}}]);