(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{365:function(t,a,n){"use strict";n.r(a);var s=n(45),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"类和方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类和方法"}},[t._v("#")]),t._v(" 类和方法")]),t._v(" "),n("h2",{attrs:{id:"成员变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#成员变量"}},[t._v("#")]),t._v(" 成员变量")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 成员变量\n */\n\npublic class Day01 {\n    private  String  name;\n    //成员方法\n    public String getName(){\n        int id =0;  //局部变量\n        setName("java");\n        return id +this.name;\n    }\n    //成员方法\n    private void setName(String name) {\n        //this关键字 这里的this代表本类的一个对象\n        this.name = name;\n    }\n    //使用成员方法\n    public Day01 getBook(){\n        return this;\n    }\n}\n')])])]),n("h2",{attrs:{id:"类的构造方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的构造方法"}},[t._v("#")]),t._v(" 类的构造方法")]),t._v(" "),n("p",[t._v("构造方法是一种与类同名的方法，对象的创建就是通过构造方法来完成")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class Day02 {\n\n    //构造方法【无参】\n    public Day02(){\n        //this可以调用有参的构造方法，但是只能在无参构造方法中使用，而且必须是第一句\n        this("this调用无参构造方法");\n        System.out.println("调用无参构造方法");\n    }\n\n    //有参数的构造方法\n    public Day02(String name) {\n        System.out.println("有参数的构造方法");\n    }\n\n    public static void main(String[] args) {\n       Day02 day02 = new Day02();\n\n    }\n\n}\n')])])]),n("h3",{attrs:{id:"静态变量、常量、方法、主方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态变量、常量、方法、主方法"}},[t._v("#")]),t._v(" 静态变量、常量、方法、主方法")]),t._v(" "),n("ul",[n("li",[t._v("学习之前需要了解一下关键字 static ，应为被static修饰的变量、常量、方法被称为静态变量、常量、方法")]),t._v(" "),n("li",[t._v("静态数据和静态方法的作用通常是为了提供共享数据和方法的一种实现，以static声明的对象和方法，使用时直接用类名调用这些静态成员")]),t._v(" "),n("li",[t._v("注意：")])]),t._v(" "),n("p",[t._v("1、静态方法中不可以使用this关键字")]),t._v(" "),n("p",[t._v("2、静态方法中不可以直接调用非静态的方法")]),t._v(" "),n("p",[t._v("主方法，程序的入口 使用关键字main定义")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public  class Day03 {\n    static double PI= 3.1415;   //静态成员变量\n    static  int  id;\n    //静态方法\n    public  static  void method1(){\n        System.out.println("我是一个静态方法");\n    }\n    //调用静态变量和方法\n    public void  method2(){\n        System.out.println(Day03.PI);\n        System.out.println(Day03.id);\n        Day03.method1();\n    }\n    //主方法，程序的入口\n    public static void main(String[] args) {\n        Day03 day03 = new Day03();\n        day03.method2();\n    }\n\n}\n')])])]),n("h2",{attrs:{id:"对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),n("ul",[n("li",[t._v("Java的在世界，完全可以为你自己new一个对象出来")]),t._v(" "),n("li",[t._v("new 操作符创建对象，同时会自主调用构造方法中的代码")]),t._v(" "),n("li",[t._v("对象的销毁")]),t._v(" "),n("li",[t._v("java提供fianlize（）方法。来回收一些不是被new出来的对象，java自己回收机制不受人为控制，所以时间不确定")]),t._v(" "),n("li",[t._v("当然我们也可以指直接调用system.gc()方法强制启动垃圾回收机制")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class Day04 {\n   public Day04(){\n       System.out.println("我是一个构造方法，你可以通过new来让我给你造个对象");\n   }\n\n   public static void main(String[] args) {\n       new Day04();\n   }\n}\n')])])])])}),[],!1,null,null,null);a.default=i.exports}}]);