(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{367:function(t,e,n){"use strict";n.r(e);var s=n(45),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),n("h2",{attrs:{id:"list集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list集合"}},[t._v("#")]),t._v(" list集合")]),t._v(" "),n("p",[t._v("list集合接口  :实现可变数组，可以保存任何类型元素")]),t._v(" "),n("p",[t._v("ArrayList ：随机插入和访问处理快")]),t._v(" "),n("p",[t._v("LinkList：链式存储，向集合中插入、删除效率比较快")]),t._v(" "),n("p",[t._v("常用方法：")]),t._v(" "),n("ul",[n("li",[t._v("get（index i） 获取下标位元素")]),t._v(" "),n("li",[t._v("set（index i ,Element e) 修改下标位元素")])]),t._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class List_Test {\n    public static void main(String[] args) {\n        //创建集合对象\n        //<>指集合的类型\n        System.out.println("********************arraylist**************");\n        List<String> list = new ArrayList(); //创建结合对象\n        list.add("张三"); //添加元素\n        list.add("李四"); //添加元素\n        list.add("王五"); //添加元素\n        // list.add(111); 这里我试着添加int类型，提示只能添加String\n        list.remove(2);//删除元素，这里注意下标值从0开始\n        for(int i=0;i<list.size();i++){\n            System.out.println(list.get(i)); //使用get方法获取参数\n        }\n        System.out.println("------------快乐分解线---------------");\n        list.set(0,"修改张三"); //修改参数\n        for(int i=0;i<list.size();i++){\n            System.out.println(list.get(i)); //使用get方法获取参数\n        }\n\n        System.out.println("********************Linkedlist**************");\n        List<String> list1 = new LinkedList<>();\n        list1.add("张三");\n        list1.add(0,"李四");\n        for(int i=0;i<list1.size();i++){\n            System.out.println(list1.get(i)); //使用get方法获取参数\n        }\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"map集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map集合"}},[t._v("#")]),t._v(" map集合")]),t._v(" "),n("p",[t._v("map接口提供将key映射到值得对象")]),t._v(" "),n("ul",[n("li",[t._v("常用方法：")]),t._v(" "),n("li",[t._v("put（K key, V value）：向集合添加key和value的映射关系")]),t._v(" "),n("li",[t._v("get（Object key）: 如果存在指定key对象，返回该对象的对应值，否则返回null")]),t._v(" "),n("li",[t._v("keySet（）：返回该对象中所有key对象形成的集合")]),t._v(" "),n("li",[t._v("values（）：返回该集合中所有值对象形成的Collection集合")])]),t._v(" "),n("h3",{attrs:{id:"例子-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class Map_Test {\n   public static void main(String[] args) {\n       //创建map集合对象\n       Map<String, Object> map = new HashMap<>();\n\n       List list = new ArrayList();\n       list.add("a");\n       list.add("b");\n       list.add("c");\n\n       List list1 = new ArrayList();\n       list1.add("张三");\n       list1.add("李四");\n       list1.add("王五");\n\n       //将数据添加到map集合\n       map.put("01",list);\n       map.put("02",list1);\n\n       //通过键获取值\n       System.out.println(map.get("01"));\n       System.out.println(map.get("02"));\n       System.out.println(map.get("03"));\n\n       //解析值中得数组\n       List list_ruslt = (List) map.get("01");\n       for (int i=0;i<list_ruslt.size();i++){\n           System.out.println(list_ruslt.get(i));\n       }\n\n       //提取键得集合\n       Set<String> set =map.keySet();\n       Iterator iterator = set.iterator();\n       System.out.println("KEY集合中得元素：");\n       while (iterator.hasNext()){\n           System.out.println(iterator.next());\n       }\n\n       //提取Vlaues值集合\n       Collection cool = map.values();\n       iterator=cool.iterator();\n       System.out.println("VALUE集合中得元素：");\n       while (iterator.hasNext()){\n           System.out.println(iterator.next());\n       }\n   }\n}\n')])])]),n("h2",{attrs:{id:"set集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set集合"}},[t._v("#")]),t._v(" set集合")]),t._v(" "),n("p",[t._v("set集合无序、不能重复")]),t._v(" "),n("p",[t._v("常用方法：")]),t._v(" "),n("ul",[n("li",[t._v("first() :返回此Set中当前第一个元素")]),t._v(" "),n("li",[t._v("last（）：返回此Set中当前第一个元素")]),t._v(" "),n("li",[t._v("headSet(E toElement):截取排在某个对象前面的的集合")]),t._v(" "),n("li",[t._v("subSet(E fromElement ,E toElement):截取排在某两个之间的对象的的集合,截取时前半部是包含，后半部不包含")]),t._v(" "),n("li",[t._v("tailSet（E fromElement）:截取某个对象及后面面的的集合")])]),t._v(" "),n("h3",{attrs:{id:"例子-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子-3"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.util.Iterator;\nimport java.util.TreeSet;\n\npublic class Set_Test<mian> implements Comparable {\n\n    private String name;\n    private long id;\n    public Set_Test(String name,long id){\n        this.id =id;\n        this.name=name;\n\n    }\n\n\n    @Override\n    public int compareTo(Object o) {\n        Set_Test set_test =(Set_Test) o;\n        int result = id>set_test.id?1:(id==set_test.id?0:-1);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Set_Test set_test1 = new Set_Test("李同学",01011);\n        Set_Test set_test2 = new Set_Test("张同学",01012);\n        Set_Test set_test3 = new Set_Test("王同学",01013);\n\n        TreeSet<Set_Test> tree = new TreeSet<>();\n        tree.add(set_test1);\n        tree.add(set_test2);\n        tree.add(set_test3);\n        //返回此Set中当前第一个元素\n        System.out.println(tree.first().getId()+" "+tree.first().getName());\n        //返回此Set中当前最后一个元素\n        System.out.println(tree.last().getId()+" "+tree.last().getName());\n        //使用迭代器迭代对象\n        Iterator<Set_Test> iterator = tree.iterator();\n        System.out.println("Set集合中所有的元素：");\n        while(iterator.hasNext()){\n            Set_Test st = (Set_Test) iterator.next();\n            System.out.println(st.getId()+" "+st.getName());\n        }\n        //截取排在某个对象前面的的集合\n        iterator = tree.headSet(set_test2).iterator();\n        System.out.println("截取排在某个对象前面的的集合：");\n        while (iterator.hasNext()){\n            Set_Test st = (Set_Test)iterator.next();\n            System.out.println(st.getId()+" "+st.getName());\n        }\n        //截取排在某两个之间的对象的的集合,截取时前半部是闭区间，后半部分开区间\n        iterator = tree.subSet(set_test1,set_test3).iterator();\n        System.out.println("截取排在某两个之间的对象的的集合,截取时前半部是闭区间，后半部分开区间：");\n        while (iterator.hasNext()){\n            Set_Test st = (Set_Test)iterator.next();\n            System.out.println(st.getId()+" "+st.getName());\n        }\n        //截取某个对象及后面面的的集合\n        iterator = tree.tailSet(set_test1).iterator();\n        System.out.println("截取排在某个对象后面面的的集合：");\n        while (iterator.hasNext()){\n            Set_Test st = (Set_Test)iterator.next();\n            System.out.println(st.getId()+" "+st.getName());\n        }\n\n    }\n\n//可以封装base类\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n}\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);